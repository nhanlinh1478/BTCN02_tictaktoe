{"ast":null,"code":"var _jsxFileName = \"F:\\\\Chuy\\xEAn ng\\xE0nh\\\\WEB n\\xE2ng cao\\\\BTCN02\\\\src\\\\components\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Board from \"./Board\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const [history, setHistory] = useState([{\n    squares: Array(9).fill(null)\n  }]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [ascend, setAscend] = useState(true);\n  const [value, setValue] = useState(3);\n  const [newBoard, setNewBoard] = useState(4);\n\n  const handleInputChange = event => {\n    setValue(event.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newBoardSize = value;\n    setNewBoard(newBoardSize);\n    setXIsNext(true);\n    setStepNumber(0);\n    setHistory({\n      squares: Array(newBoardSize ** 2).fill(null)\n    });\n  };\n\n  const handleClick = i => {\n    const currentHistory = history.slice(0, stepNumber + 1);\n    const current = currentHistory[currentHistory.length - 1];\n    const squares = current.squares.slice();\n    const lastMove = [i % 3, Math.floor(i / 3)];\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = xIsNext ? \"X\" : \"O\";\n    setHistory(currentHistory.concat([{\n      squares: squares,\n      lastMove: lastMove\n    }]));\n    setStepNumber(currentHistory.length);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const toggle = () => {\n    setAscend(!ascend);\n  };\n\n  const active = {\n    fontWeight: \"bold\"\n  };\n  const inactive = {\n    fontWeight: \"normal\"\n  };\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares);\n  const moves = history.map((step, move) => {\n    if (ascend) {\n      move = history.length - 1 - move;\n    }\n\n    const desc = move ? \"Go to move #\" + move + \" at position (\" + history[move].lastMove.toString() + \")\" : \"Go to game start\";\n\n    if (stepNumber) {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          style: stepNumber === move ? active : inactive,\n          onClick: () => jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          style: stepNumber === move ? active : inactive,\n          onClick: () => jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this);\n    }\n  });\n  let status;\n  const changeAscend = ascend ? \"ascending\" : \"descending\";\n\n  if (winner) {\n    status = \"Winner: \" + winner.winner;\n  } else if (!current.squares.includes(null)) {\n    status = \"It's a draw\";\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  function calculateWinner(squares) {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return {\n          winner: squares[a],\n          winningSquares: lines[i]\n        };\n      }\n    }\n\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"id_row\",\n          class: \"form-field\",\n          type: \"number\",\n          placeholder: \"input row-col\",\n          name: \"row-col\",\n          value: value,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        squares: current.squares,\n        onClick: i => handleClick(i),\n        winner: winner && winner.winningSquares\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggle,\n        children: changeAscend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"vk7VOy/CGAV+c5GcSVuNlvM8QmY=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["F:/Chuyên ngành/WEB nâng cao/BTCN02/src/components/Game.js"],"names":["React","useState","Board","Game","history","setHistory","squares","Array","fill","stepNumber","setStepNumber","xIsNext","setXIsNext","ascend","setAscend","value","setValue","newBoard","setNewBoard","handleInputChange","event","target","handleSubmit","e","preventDefault","newBoardSize","handleClick","i","currentHistory","slice","current","length","lastMove","Math","floor","calculateWinner","concat","jumpTo","step","toggle","active","fontWeight","inactive","winner","moves","map","move","desc","toString","status","changeAscend","includes","lines","a","b","c","winningSquares"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Board from \"./Board\";\r\nfunction Game() {\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(9).fill(null),\r\n    },\r\n  ]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [ascend, setAscend] = useState(true);\r\n  const [value, setValue] = useState(3);\r\n  const [newBoard, setNewBoard] = useState(4);\r\n  const handleInputChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newBoardSize = value;\r\n    setNewBoard(newBoardSize);\r\n    setXIsNext(true);\r\n    setStepNumber(0);\r\n    setHistory({\r\n      squares: Array(newBoardSize ** 2).fill(null),\r\n    });\r\n  };\r\n  const handleClick = (i) => {\r\n    const currentHistory = history.slice(0, stepNumber + 1);\r\n    const current = currentHistory[currentHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n    const lastMove = [i % 3, Math.floor(i / 3)];\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(\r\n      currentHistory.concat([\r\n        {\r\n          squares: squares,\r\n          lastMove: lastMove,\r\n        },\r\n      ])\r\n    );\r\n    setStepNumber(currentHistory.length);\r\n    setXIsNext(!xIsNext);\r\n  };\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXIsNext(step % 2 === 0);\r\n  };\r\n  const toggle = () => {\r\n    setAscend(!ascend);\r\n  };\r\n\r\n  const active = {\r\n    fontWeight: \"bold\",\r\n  };\r\n  const inactive = {\r\n    fontWeight: \"normal\",\r\n  };\r\n  const current = history[stepNumber];\r\n  const winner = calculateWinner(current.squares);\r\n\r\n  const moves = history.map((step, move) => {\r\n    if (ascend) {\r\n      move = history.length - 1 - move;\r\n    }\r\n    const desc = move\r\n      ? \"Go to move #\" +\r\n        move +\r\n        \" at position (\" +\r\n        history[move].lastMove.toString() +\r\n        \")\"\r\n      : \"Go to game start\";\r\n    if (stepNumber) {\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            style={stepNumber === move ? active : inactive}\r\n            onClick={() => jumpTo(move)}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    } else {\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            style={stepNumber === move ? active : inactive}\r\n            onClick={() => jumpTo(move)}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    }\r\n  });\r\n\r\n  let status;\r\n  const changeAscend = ascend ? \"ascending\" : \"descending\";\r\n  if (winner) {\r\n    status = \"Winner: \" + winner.winner;\r\n  } else if (!current.squares.includes(null)) {\r\n    status = \"It's a draw\";\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        return {\r\n          winner: squares[a],\r\n          winningSquares: lines[i],\r\n        };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            id=\"id_row\"\r\n            class=\"form-field\"\r\n            type=\"number\"\r\n            placeholder=\"input row-col\"\r\n            name=\"row-col\"\r\n            value={value}\r\n            onChange={handleInputChange}\r\n          />\r\n          <button type=\"submit\">save</button>\r\n        </form>\r\n        <Board\r\n          squares={current.squares}\r\n          onClick={(i) => handleClick(i)}\r\n          winner={winner && winner.winningSquares}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>{status}</div>\r\n        <button onClick={toggle}>{changeAscend}</button>\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}