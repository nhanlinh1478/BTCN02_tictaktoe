[{"F:\\Chuyên ngành\\WEB nâng cao\\BTCN02\\src\\index.js":"1","F:\\Chuyên ngành\\WEB nâng cao\\BTCN02\\src\\App.js":"2","F:\\Chuyên ngành\\WEB nâng cao\\BTCN02\\src\\reportWebVitals.js":"3","F:\\Chuyên ngành\\WEB nâng cao\\BTCN02\\src\\components\\Game.js":"4","F:\\Chuyên ngành\\WEB nâng cao\\BTCN02\\src\\components\\Board.js":"5","F:\\Chuyên ngành\\WEB nâng cao\\BTCN02\\src\\components\\Square.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":144,"mtime":1632781788436,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":4199,"mtime":1633524256454,"results":"11","hashOfConfig":"8"},{"size":861,"mtime":1633506932989,"results":"12","hashOfConfig":"8"},{"size":334,"mtime":1632781277917,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l5kc3y",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Chuyên ngành\\WEB nâng cao\\BTCN02\\src\\index.js",[],"F:\\Chuyên ngành\\WEB nâng cao\\BTCN02\\src\\App.js",[],"F:\\Chuyên ngành\\WEB nâng cao\\BTCN02\\src\\reportWebVitals.js",[],"F:\\Chuyên ngành\\WEB nâng cao\\BTCN02\\src\\components\\Game.js",["27"],"import React, { useState } from \"react\";\r\nimport Board from \"./Board\";\r\nfunction Game() {\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(9).fill(null),\r\n    },\r\n  ]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [ascend, setAscend] = useState(true);\r\n  const [value, setValue] = useState(3);\r\n  const [newBoard, setNewBoard] = useState(4);\r\n  const handleInputChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newBoardSize = value;\r\n    setNewBoard(newBoardSize);\r\n    setXIsNext(true);\r\n    setStepNumber(0);\r\n    setHistory({\r\n      squares: Array(newBoardSize ** 2).fill(null),\r\n    });\r\n  };\r\n  const handleClick = (i) => {\r\n    const currentHistory = history.slice(0, stepNumber + 1);\r\n    const current = currentHistory[currentHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n    const lastMove = [i % 3, Math.floor(i / 3)];\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(\r\n      currentHistory.concat([\r\n        {\r\n          squares: squares,\r\n          lastMove: lastMove,\r\n        },\r\n      ])\r\n    );\r\n    setStepNumber(currentHistory.length);\r\n    setXIsNext(!xIsNext);\r\n  };\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXIsNext(step % 2 === 0);\r\n  };\r\n  const toggle = () => {\r\n    setAscend(!ascend);\r\n  };\r\n\r\n  const active = {\r\n    fontWeight: \"bold\",\r\n  };\r\n  const inactive = {\r\n    fontWeight: \"normal\",\r\n  };\r\n  const current = history[stepNumber];\r\n  const winner = calculateWinner(current.squares);\r\n\r\n  const moves = history.map((step, move) => {\r\n    if (ascend) {\r\n      move = history.length - 1 - move;\r\n    }\r\n    const desc = move\r\n      ? \"Go to move #\" +\r\n        move +\r\n        \" at position (\" +\r\n        history[move].lastMove.toString() +\r\n        \")\"\r\n      : \"Go to game start\";\r\n    if (stepNumber) {\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            style={stepNumber === move ? active : inactive}\r\n            onClick={() => jumpTo(move)}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    } else {\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            style={stepNumber === move ? active : inactive}\r\n            onClick={() => jumpTo(move)}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    }\r\n  });\r\n\r\n  let status;\r\n  const changeAscend = ascend ? \"ascending\" : \"descending\";\r\n  if (winner) {\r\n    status = \"Winner: \" + winner.winner;\r\n  } else if (!current.squares.includes(null)) {\r\n    status = \"It's a draw\";\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        return {\r\n          winner: squares[a],\r\n          winningSquares: lines[i],\r\n        };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            id=\"id_row\"\r\n            class=\"form-field\"\r\n            type=\"number\"\r\n            placeholder=\"input row-col\"\r\n            name=\"row-col\"\r\n            value={value}\r\n            onChange={handleInputChange}\r\n          />\r\n          <button type=\"submit\">save</button>\r\n        </form>\r\n        <Board\r\n          squares={current.squares}\r\n          onClick={(i) => handleClick(i)}\r\n          winner={winner && winner.winningSquares}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>{status}</div>\r\n        <button onClick={toggle}>{changeAscend}</button>\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Game;\r\n","F:\\Chuyên ngành\\WEB nâng cao\\BTCN02\\src\\components\\Board.js",[],"F:\\Chuyên ngành\\WEB nâng cao\\BTCN02\\src\\components\\Square.js",[],{"ruleId":"28","severity":1,"message":"29","line":13,"column":10,"nodeType":"30","messageId":"31","endLine":13,"endColumn":18},"no-unused-vars","'newBoard' is assigned a value but never used.","Identifier","unusedVar"]